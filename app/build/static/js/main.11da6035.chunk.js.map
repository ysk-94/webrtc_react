{"version":3,"sources":["components/Entry.tsx","config/sw.ts","components/Message.tsx","components/Room.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Entry","newRoomId","uuidv4","useState","roomId","setRoomId","name","setName","className","id","type","onChange","e","target","value","onNameChange","placeholder","style","marginTop","onRoomIdChange","to","peer","Peer","key","debug","Message","props","message","setMessage","onClick","sendMessage","Room","isInit","room","localVideoRef","remoteVideoRefs","remoteStreams","userName","match","params","React","createRef","state","remoteVideos","messages","open","alert","this","navigator","mediaDevices","getUserMedia","audio","video","localStream","current","srcObject","play","catch","console","error","joinRoom","mode","stream","once","on","peerId","a","newVideo","ref","playsInline","autoPlay","Object","assign","setState","data","parsed","src","JSON","parse","push","user","init","keys","forEach","targetNode","send","stringify","values","map","wordWrap","padding","muted","color","Component","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.11da6035.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid';\nimport { peer } from '../config/sw';\nimport '../css/Entry.css'\n\n\nconst Entry = () => {\n  const newRoomId = uuidv4();\n  const [roomId, setRoomId] = useState('');\n  const [name, setName] = useState('');\n\n  /**\n   * RoomId変更\n   */\n  const onRoomIdChange = (e: any) => {\n    setRoomId(e.target.value);\n  };\n\n  const onNameChange = (e: any) => {\n    setName(e.target.value);\n  };\n\n  return(\n    <div className='entry'>\n      <div>\n        <h1 className='entry__logo'>INN-STUDIO</h1>\n        <div className='entry__formBox'>\n          <p className='entry__formBody'>INN-STUDIOで遠く離れた人とのビデオ通話を楽しみましょう。</p>\n          <div className='entry__row entry__row--1'>\n          </div>\n          <form className='entry__form'>\n            <div className='entry__row entry__row--flex'>\n              <input className='entry__form__input' id=\"name\" type=\"text\" onChange={e => onNameChange(e)} placeholder='ニックネームを入力'></input>\n              <input style={{marginTop: '8px'}} className='entry__form__input' id=\"roomId\" type=\"text\" onChange={e => onRoomIdChange(e)} placeholder='ROOMIDを入力（JOINのみ）'></input>\n              <p className='entry__note'>※Roomを新規作成する場合、ROOMIDは自動で作成されます。</p>\n              <div className='entry__row'>\n                <Link className='entry__newLink' to={`/rooms/${newRoomId}?name=${name}`}>新規作成</Link>\n                <Link className='entry__joinLink' to={`/rooms/${roomId}?name=${name}`}>JOIN</Link>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n      <p className='copyright'>© 2020 ysk.</p>\n    </div>\n  );\n};\n\nexport default Entry;","import Peer from 'skyway-js';\n\nexport const peer: Peer = new Peer({\n  key: '5630df90-6dd1-4ed9-9585-9469ecd49dd8',\n  debug: 0\n});\n","import React, { useState } from 'react';\n\ninterface Props {\n  sendMessage: (message: string) => void;\n}\n\nconst Message = (props: Props) => {\n  const [message, setMessage] = useState('');\n\n  const onSend = () => {\n    props.sendMessage(message);\n    setMessage('');\n  };\n\n  return(\n    <div className='room__form'>\n      <input \n        id=\"message\"\n        className='room__form__input' \n        type=\"text\" \n        value={message}\n        onChange={e => setMessage(e.target.value)} \n        placeholder='メッセージを入力'></input>\n      <a className='room__form__send' onClick={() => onSend()}>送信</a>\n    </div>\n  );\n};\n\nexport default Message;","import React from 'react';\nimport { peer } from '../config/sw';\nimport Message from './Message';\nimport { useLocation } from \"react-router-dom\";\nimport '../css/Room.css';\n\ninterface Props {\n  match: {\n    params: {\n      roomId: string\n    }\n  }\n};\n\ninterface State {\n  remoteVideos: any;\n  messages: {\n    user: string\n    message: string\n  }[]\n}\n\nclass Room extends React.Component<Props, State> {\n  private isInit: boolean;\n  private room: any;\n  private roomId: string;\n  private localVideoRef: any;\n  private remoteVideoRefs: any;\n  private remoteStreams: any;\n  private userName: any;\n\n  constructor(props: Props) {\n    super(props);\n    this.isInit = false;\n    // RoomID\n    this.roomId = this.props.match.params.roomId;\n    // LocalのVideo\n    this.localVideoRef = React.createRef();\n    // RemoteのVideoRef\n    this.remoteVideoRefs = {};\n    // RemoteのStreams\n    this.remoteStreams = {};\n    // state\n    this.state = {\n      remoteVideos: [],\n      messages: []\n    };\n  };\n\n  /**\n   * Join\n   */\n  async init() {\n    // peerがシナジリングサーバーに接続できていなかったら処理しない\n    if (!peer.open) {\n      alert('サーバー未接続エラー');\n      return;\n    } else {\n      this.isInit = true;\n    }\n\n    // Local Stream\n    const localStream = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: true\n    });\n    this.localVideoRef.current.srcObject = localStream;\n    await this.localVideoRef.current.play().catch(console.error);\n\n    // Roomに接続\n    const room = peer.joinRoom(this.roomId, {\n      mode: 'sfu',\n      stream: localStream\n    });\n\n    // 接続時\n    room.once('open', () => {\n      alert(`Room: ${this.roomId} へようこそ`);\n    });\n\n    // ユーザージョイン\n    room.on('peerJoin', peerId => {\n      alert(`=== ${peerId} joined ===\\n`);\n    });\n\n    // 新しく入ってきたユーザーのストリーム表示\n    room.on('stream', async (stream) => {\n      // Refを追加\n      this.remoteVideoRefs[stream.peerId] = React.createRef();\n\n      const newVideo = (\n        <video\n          id={stream.peerId}\n          key={stream.peerId}\n          ref={this.remoteVideoRefs[stream.peerId]} // 今回追加したrefを指定\n          playsInline\n          autoPlay\n          ></video>);\n\n      // StreamをpeerIdに紐づけて保管\n      this.remoteStreams[stream.peerId] = stream;\n      // VideoタグをpeerIdに紐づけてStateに保管\n      const remoteVideos = Object.assign({}, this.state.remoteVideos);\n      remoteVideos[stream.peerId] = newVideo;\n      this.setState({\n        remoteVideos: remoteVideos,\n      });\n    });\n\n    // 他のユーザーが退出したとき\n    room.on('peerLeave', (peerId) => {\n      // this.remoteVideoRefs[peerId].current.srcObject.getTracks().forEace((track: any) => track.stop());\n      // this.remoteVideoRefs[peerId].current.srcObject = null;\n      const remoteVideos = Object.assign({}, this.state.remoteVideos);\n      remoteVideos[peerId] = null;\n      this.setState({\n        remoteVideos: remoteVideos,\n      });\n    });\n\n    // メッセージ送信\n    room.on('data', ({ data, src }) => {\n      const parsed = JSON.parse(data);\n      const messages = Object.assign([], this.state.messages);\n      messages.push({\n        user: parsed.user,\n        message: parsed.message\n      });\n      this.setState({messages: messages});\n    });\n\n\n    // 自分が退出したとき\n    room.once('close', () => {\n      this.setState({\n        remoteVideos: null\n      });\n    });\n\n    peer.on('error', console.error);\n  };\n\n  componentDidMount() {\n    if (!this.isInit) {\n      this.init();\n    }\n  }\n\n  componentDidUpdate() {\n    // すべてのリモートビデオのsrcObjectをチェック\n    Object.keys(this.remoteVideoRefs).forEach((key: string) => {\n      const targetNode = this.remoteVideoRefs[key].current;\n      if (targetNode && !targetNode.srcObject) {\n        targetNode.srcObject = this.remoteStreams[key];\n      }\n    });\n  }\n\n  // Roomから離れたとき\n  componentWillUnmount() {\n    // this.room.close();\n  }\n\n\n  /**\n   * Message送信\n   */\n  sendMessage(message: string) {\n    const data = {\n      user: this.userName,\n      message: message\n    };\n    this.room.send(JSON.stringify(data));\n\n    const messages = Object.assign([], this.state.messages);\n      messages.push({\n        user: 'me',\n        message: message\n      });\n    this.setState({messages: messages});\n  }\n\n  render() {\n    const remoteVideos = this.state.remoteVideos? Object.values(this.state.remoteVideos) : null;\n    const messages = this.state.messages.map((message) => <p style={{wordWrap: 'break-word', padding: '0 12px'}}>{message.user}: {message.message}</p>)\n\n    return(\n      <div className='room'>\n        <div className='room__remoteVideos'>\n          <video\n            id=\"localStream\"\n            ref={this.localVideoRef}\n            muted\n            playsInline\n            ></video>\n          {remoteVideos}\n        </div>\n        <div className='room__spacer'></div>\n        <div className='room__footer'>\n          <h2 style={{color: '#333', padding: '0 12px'}}>ROOMID: {this.roomId}</h2>\n          <div className='room_messages'>{messages}</div>\n          <Message sendMessage={(message) => this.sendMessage(message)} />\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default Room;","import React from 'react';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Entry from './Entry';\nimport Room from './Room';\n\nconst App = () => {\n  return (\n    <>\n      <BrowserRouter>\n        <Route exact path='/' component={Entry} />\n        <Route path='/rooms/:roomId' component={Room} />\n      </BrowserRouter>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}